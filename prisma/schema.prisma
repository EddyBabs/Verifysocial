// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  country   String
  state     String
  city      String
  street    String
  userId    String   @unique @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  fullname      String
  emailVerified DateTime?
  phone         String?
  password      String?
  provider      String?
  image         String?
  gender        GenderType?
  campaign      Boolean     @default(false)
  anonymous     Boolean     @default(false)
  role          UserRole    @default(USER)
  accounts      Account[]
  sessions      Session[]
  vendor        Vendor?
  address       Address?
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

enum SocialPlatforms {
  FACEBOOK
  INSTAGRAM
  TWITTER
}

model socialAccount {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  provider     SocialPlatforms
  accessToken  String
  refreshToken String?
  userId       String?
  username     String?
  tokenExpiry  DateTime?
  vendorId     String          @db.ObjectId
  vendor       Vendor          @relation(references: [id], fields: [vendorId])
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  @@unique([vendorId, provider])
}

enum Tier {
  TIER1
  TIER2
  TIER3
}

model Vendor {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId         String                 @unique @db.ObjectId
  User           User                   @relation(fields: [userId], references: [id])
  businessName   String?
  businessAbout  String?
  socialPlatform VendorSocialPlatform[]
  tier           Tier?
  credentials    KYCCredential[]
  Product        Product[]
  Review         Review[]
  orders         Order[]
  socialAccount  socialAccount[]
  categories     String[]
  totalRating    Int                    @default(0)
  reviewCount    Int                    @default(0)
  rating         Float                  @default(0) // Stores the average rating
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id                         String                 @id @default(auto()) @map("_id") @db.ObjectId
  code                       String                 @unique
  status                     OrderStatus            @default(PENDING)
  vendorId                   String                 @db.ObjectId
  userId                     String?                @db.ObjectId
  user                       User?                  @relation(references: [id], fields: [userId])
  name                       String
  amountValue                Float                  @default(0)
  minAmount                  Float
  maxAmount                  Float
  review                     Review?
  deliveryPeriod             DateTime
  returnPeriod               Int
  quantity                   Int
  resolved                   Boolean                @default(false)
  userDeliveryConfirmation   Boolean                @default(false)
  vendorDeliveryConfirmation Boolean                @default(false)
  userPaymentConfirmation    Boolean                @default(false)
  vendorPaymentConfirmation  Boolean                @default(false)
  userResolvedConfirmation   Boolean                @default(false)
  vendorResolvedConfirmation Boolean                @default(false)
  vendor                     Vendor                 @relation(references: [id], fields: [vendorId])
  orderExtension             OrderExtension[]
  createdAt                  DateTime               @default(now()) @map("created_at")
  updatedAt                  DateTime               @updatedAt @map("updated_at")
  cancelled                  OrderCancel?
  vendorOrderExtension       vendorOrderExtension[]
  customerSatisfaction       SatisFactionData?
  vendorSatisfaction         SatisFactionData?

  // Fraudulent Fields
  fraudulent     Boolean   @default(false) // Flag for fraud
  flaggedBy      String?   @db.ObjectId // ID of the admin or system flagging
  fraudReason    String? // Reason for flagging
  fraudFlaggedAt DateTime? // Timestamp when flagged

  @@unique([code, vendorId])
}

type SatisFactionData {
  transactionSatisfaction Int
  rateApp                 Int
  returnToApp             Int
  feelSafe                Int
  recommend               Int
}

model vendorOrderExtension {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId              String    @db.ObjectId
  order                Order     @relation(fields: [orderId], references: [id])
  reason               String
  hasPaid              Boolean?
  previousDeliveryDate DateTime?
  createdAt            DateTime  @default(now())

  @@unique([orderId, previousDeliveryDate])
}

type OrderCancel {
  reason      String
  cancelledAt DateTime
  cancelledBy String
}

model OrderExtension {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId              String    @db.ObjectId
  order                Order     @relation(fields: [orderId], references: [id])
  hasBeenContacted     Boolean?
  hasMadePayment       Boolean?
  previousDeliveryDate DateTime?
  createdAt            DateTime  @default(now())
}

model KYCCredential {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String    @db.ObjectId
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  type        String // Type of credential (e.g., "ID", "Utility Bill")
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  submittedAt DateTime  @default(now())
  verifiedAt  DateTime? // Null until approved
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

enum KYCCredentialStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GenderType {
  MALE
  FEMALE
}

enum ReviewRating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

type VendorSocialPlatform {
  url      String
  platform String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String? @db.ObjectId
  vendorId          String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  vendorId     String?  @db.ObjectId
  expires      DateTime

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier    String   @unique
  token         String   @unique
  expires       DateTime
  expiresInDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model BusinessVerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId  String   @db.ObjectId
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  image     String
  name      String?
  reviews   Review[] // Reviews on this product
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  productId String?  @db.ObjectId // Null if review is only for a vendor
  vendorId  String?  @db.ObjectId // Null if review is only for a product
  orderId   String   @unique @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  rating    Int // Rating from 1 to 5
  comment   String
  userId    String   @db.ObjectId // ID of the user who gave the review
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
